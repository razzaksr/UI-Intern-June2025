Web application:
	solution >> via internet
	
	static	>> content wont change often
		eg: Wikipedia, portfolio, ....
	dynamic	>> content will change based on time, user, location,...
		eg: swiggy, gmail, irctc, amazon



static web application:
	html, css, bootstrap, java script
dynamic web application:
	java, java script, python, php, dotnet

agenda:
UI Design/ static web
React JS>> java script based library for UI
Firebase/ Fire store, auth>> dynamic web


logics:
presentation		>> UI/ front end
business			>> coding/ backend/ api
data				>> storage logic


client/ server: http>> 80
request		>> 
header,>> authorization
data transfer
parameter	>> data will appear at url
body			>> data will be passed via http body

https://www.amazon.in/s?k=keyboards&crid=226DI1T3DQTUL&sprefix=keyboard%2Caps%2C435&ref=nb_sb_noss_2

response		>> api to client
body/data:
	data with UI/ data without UI
status code:
	200		>> success with data
	404		>> not found
	500		>> internal server error
	201		>> success without data
	401		>> unauthorized
	400		>> bad request
	403		>> forbidden


Static web application:
scripting
editor:
	vs code


web site/ web app:
	web pages>> html
		components>> grouping(div/section/header/footer)


file.html:
components/ elements:
text:	p, headers>> h1,h2...h6
media: img, video, audio
format: font, div, section
list:	ul, ol
form: input(text, check,radio),select, output, button, form, ....
navigation: a, nav
table: table, tr, th, thead, tbody

run:
extension:	live server, intellisense for CSS, HTML CSS support


self closing elements:
br
img




Free Media:
https://www.pexels.com


Task:
home.html
texts navigate to video library and ebook library
medialibrary.html >> with images and play video while click on the images
	wedding
	house warming
	birthday
ebook.html>> with images and download respective ebook while click on the respective cover page image
	health
	finance
	comic
	scifi

for free ebooks CDN:
https://www.gutenberg.org/ebooks/



iframe, nav, table, font

font: element
attributes	>> face, size, color

table>>
	thead
		tr
			th
	tbody
		tr
			td

semester report
rollno, name, sub1, ..... sub6, gpa, cgpa


nav >> navigation element where "a" element plays vital role

iframe >> includes one page into another
height, width, src

form components:
data transfer/interaction with backend api
customer send their data to the backend api via form components:
eg:
login
order placement
swiggy placement

form>> label, textbox, password, check box, radio button, button, select(drop down), text area

form>> attrbutes>> 
onsubmit(an specific user action before sending data to the backend) , 
action>>>(backend api)

button>> submit>> by default sending data to backend mentioned in action attribute

button>>
submit
reset
button

input/ button


form >> method >> get(default visible in url), post

get
http://127.0.0.1:5500/formcomponents.html?fullname=Razak+Mohamed+S&aadhaar=987657890&pan=ABCDE1122W&address=jhvhjvk%0D%0Alnl&savings=on&otp=jhgfhbjkml%3B%2C&profession=on&nri=India

post
http://127.0.0.1:5500/formcomponents.html

task:
design internship enrollment google form



Cascading Style Sheet:
format
colors
backgrounds
margins
borders
shadows
alignments: horizontal, vertical
.
.

inline		>> element style attribute
internal		>> writing styles in head section of the 						document
external		>> write it exclusive css file and import it in 					head section



internal/ external
filters:
element name
id
class


Java script:
client		>> depends on html(page)
objective: event managements: validation, button actions, CRUD

server		>> standalone using node js
objective: full stack web application, data analytics
	>> front end frameworks: react js(library), angular, vue, 
	>> back end frameworks: express

Client side java script:
	inline
	internal
	external (file.js)

events: Document Object Model
	mouse events
	keyboard events
	button events
	window events

<noscript>

</noscript>


data:
variables: var, const, let
eg: var myName = "Razak Mohamed S"
	const myExperience = 12.6
	let mySkillset = 29
data types: String, Number, Object(JSON, Array), Boolean, Date

conversion:
	String to otherType:	Number(String)
	
operations:
	Create Read Update Delete
	functions:
	
input: prompt
output:
alert	>> page
console.log() >> console


function fun_name(param){
// function body
}

new JS:

const/ var/ let = (param) => {
// function body
}


Java Script based CRUD operation

Task: 
View Games
Add new game


Form Validation:
	data validation>> using DOM
	
regular expression:
pattern:
	[A-Z]		>> only alphabets capital
	[a-z]
	[0-9]		
	*		>> 0 or more occurrence
	+		>> 1 or more occurrence
	^		>> start
	$		>> end
	{}		>> min, max

Storage logics:
Array/list: temporary memory
methods:
push	>> add values into array
pop		>> removes recently/last added value
filter		>> shortlist/ delete
map		>> iterate/ loop

1. array of primitive value(String, Number)
2. array of Java Script Object Notation(JSON)
[
	{
		"key": value
	},
	{
		"key": value
	},
]


perm m/y:
Local Storage
Session Storage



Bootstrap

